// Generated by CoffeeScript 1.10.0
(function() {
  var DatabaseComponent, DefaultInOutComponent, ExtendedComponent, _;

  _ = require('underscore');

  ExtendedComponent = require('./ExtendedComponent.coffee').ExtendedComponent;

  DatabaseComponent = require('./DatabaseComponent.coffee').DatabaseComponent;

  DefaultInOutComponent = require('./DefaultInOutComponent.coffee').DefaultInOutComponent;

  module.exports.ExtendedComponent = ExtendedComponent;

  module.exports.dateFrom = function(date) {
    if (date == null) {
      return new Date();
    }
    if (date instanceof Date) {
      return date;
    } else if (_.isString(date) && date.includes('-')) {
      return new Date(date);
    } else if (!_.isNaN(parseInt(date))) {
      return new Date(parseInt(date));
    } else if (_.isString(date)) {
      return new Date(date);
    }
    if (!date instanceof Date) {
      return new Date(date);
    }
    return date;
  };

  module.exports.uniqArrFrom = function(arr) {
    if (_.isArray(arr)) {
      return _.uniq(arr);
    }
    if (arr.includes(',')) {
      return _.uniq(arr.split(','));
    }
    if (_.isString(arr)) {
      return [arr];
    }
    throw new Error(arr + " was not an array, or a string!");
  };

  module.exports.dbconfig = function() {
    var config;
    config = {
      conn: {
        host: process.env.DATABASE_HOST,
        user: process.env.DATABASE_USER,
        password: process.env.DATABASE_PASSWORD,
        database: process.env.DATABASE_NAME,
        charset: 'utf8',
        port: 5432
      },
      pool: {
        min: 2,
        max: 20
      }
    };
    return config;
  };

  module.exports.getConnection = function() {
    var con, conn, pool, ref;
    ref = module.exports.dbconfig(), conn = ref.conn, pool = ref.pool;
    con = require('knex')({
      client: 'pg',
      connection: conn
    }, pool);
    return con;
  };

  module.exports.hijackConsoleLog = function() {
    return ['log', 'warn'].forEach(function(method) {
      var old;
      old = console[method];
      console[method] = function() {
        var args, stack;
        stack = (new Error).stack.split(/\n/);
        if (stack[0].indexOf('Error') === 0) {
          stack = stack.slice(1);
        }
        args = [].slice.apply(arguments).concat([stack[1].trim()]);
        return old.apply(console, args);
      };
    });
  };

  module.exports.DatabaseComponent = DatabaseComponent;

  module.exports.DefaultInOutComponent = DefaultInOutComponent;

}).call(this);
