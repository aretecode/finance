// Generated by CoffeeScript 1.10.0
(function() {
  var ExtendedComponent, _, invalidPorts, noflo, validEvents,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  noflo = require('noflo');

  validEvents = ['attach', 'connect', 'beginGroup', 'data', 'endGroup', 'disconnect', 'detach'];

  invalidPorts = ['ports', 'sendThenDisconnect', 'sendThenDiscon', 'addOn', 'addOnData', 'sendThenDisc', 'error'];

  ExtendedComponent = (function(superClass) {
    extend(ExtendedComponent, superClass);

    ExtendedComponent.prototype.sendThenDisc = function(name, data) {
      return this.sendThenDiscon(name, data);
    };

    ExtendedComponent.prototype.sendThenDisconnect = function(name, data) {
      return this.sendThenDiscon(name, data);
    };

    ExtendedComponent.prototype.sendThenDiscon = function(name, data) {
      var ports;
      if (data == null) {
        data = name;
        ports = Object.keys(this.outPorts);
        ports = _.filter(ports, function(port) {
          if (!_.contains(invalidPorts, port)) {
            return true;
          }
        });
        name = ports[0];
      }
      this.outPorts[name].send(data);
      this.outPorts[name].disconnect();
      return this;
    };

    ExtendedComponent.prototype.sendIfConnected = function(name, data) {
      if (this.outPorts[name].isConnected()) {
        return this.outPorts[name].send(data);
      }
    };

    ExtendedComponent.prototype.sendIfConnectedThenDisconnect = function(name, data) {
      if (this.outPorts[name].isConnected()) {
        return this.sendThenDiscon(name, data);
      }
    };

    ExtendedComponent.prototype.addInOn = function(name, opts, process) {
      this.inPorts.addOn(name, opts, process);
      return this;
    };

    ExtendedComponent.prototype.addInOnData = function(name, opts, process) {
      this.inPorts.addOnData(name, opts, process);
      return this;
    };

    function ExtendedComponent(options) {
      var inPortProperties, outPortProperties;
      ExtendedComponent.__super__.constructor.call(this, options);
      inPortProperties = {
        addOn: function(name, opts, process) {
          var addedHere, i, len, opt, ref;
          if (_.isFunction(opts)) {
            process = opts;
            opts = {};
          } else {
            ref = Object.keys(opts);
            for (i = 0, len = ref.length; i < len; i++) {
              opt = ref[i];
              if (!_.contains(validEvents, opt)) {
                continue;
              }
              addedHere = true;
              this.add(name, opts, function(event, data) {
                if (event !== opt) {
                  return;
                }
                return opts[opt](data, event);
              });
            }
          }
          if (addedHere == null) {
            this.add(name, opts, function(event, data) {
              if (!(event === opts.on || (_.isArray(opts.on && _.contains(opts.on))))) {
                return;
              }
              return process(data, event);
            });
          }
          return this;
        },
        addOnData: function(name, opts, process) {
          if (process == null) {
            process = opts;
            opts = {};
          }
          opts.data = process;
          return this.addOn(name, opts, process);
        }
      };
      outPortProperties = {
        sendThenDisconnect: function(name, data) {
          return this.sendThenDiscon(name, data);
        },
        sendThenDiscon: function(name, data) {
          this[name].send(data);
          return this[name].disconnect();
        },
        sendThenDisc: function(name, data) {
          this.sendThenDiscon(name, data);
          return this;
        }
      };
      _.extend(this.outPorts, outPortProperties);
      _.extend(this.inPorts, inPortProperties);
    }

    return ExtendedComponent;

  })(noflo.Component);

  module.exports.ExtendedComponent = ExtendedComponent;

}).call(this);
